//code for the endpoints:
const express= require('express');
const bcrypt= require('bcrypt');
const jwt= require('jsonwebtoken');

const app= express();
app.use(express.json());

// Database connection
const users=[];

//JWT secret key
const secretKey='your-secret-key';

//Signup endpoint
app.post('/api/signup',async(req,res)=>{
try{

//Extract user data from request body
const{name,email,password}=req.body;

//check if user with the same already exists
const existingUser= user.find((user)=>user.email===emai);
if(existingUser){
return res.status(409).json({message: 'User already exists'});
}

//Hash the User's password
const hashedPassword=await bcrypt.hash(password, 10);

// Create new user object with hashed password
const user={
name,
email,
password: hashedPassword,
};

//Add new user to database
users.push(user);

//Create JWT with user ID as payload
const token=jwt.sign({ id: user.email},secretKey);

//Send JWT to client
return res.json({token});
} catch(error) {
console.error(error);
return res.status(5500).json({ message: 'Server error'});
}
});

//Login endpoint
app.post('/api/login',async (req, res)=> {
try{
//Extract user data from request body
const { email, password} = req.body;

//Find user with matching email
const user = users.find((user)=> user.email ===email);
if(!user) {
  return res.status(401).json({message: 'Invalid credentials'});
 }
 
 //compare password with hashed password
 const passwordMatch= await bcrypt.compare(password,user.password);
 if(!passwordMatch){ 
 return res.status(401).json({message: 'Invalid credentails'});
 }
 
 // Create JWT with user ID as payload
 const token= jwt.sign({id: user.email },secretKey);
 
 //Send JWT to client
 return res.json({token});
 } catch (error) {
 console.error(error);
 return res.status(500).json({message:'Server error'});
 }
 });
 
 //Check-auth endpoint
 app.get('/api/check-auth'.(req,res) => {
 try {
 //Extract JWT from request headers
 const token= req.headers.authorization.split(' ')[1];
 
 //Verify JWT
 const decodedToken = jwt.verify(token,secretKey);
 
 //If verification succeeds , send 200 status code client
 return res.sendStatus(200);
 } catch(error) {
 console.error(error);
 return res.status(401).json({message: 'Invalid token'});
 }
 });
 //server setup
 const port =3000;
 app.listen(port,() => console.log('Server listening onport${port}'));
